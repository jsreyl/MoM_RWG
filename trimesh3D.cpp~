//Here we indexate the triangles and nodes of the geometry, as well as giving the coordinates to each node.
//In this case we're building a flat rectangular plate with sides of length a and b divided in steps of Nx and Ny "squares" divided diagonally to create two triangles
//a.k.a. this is the first geometry by Rao in their 1982 paper
#include"trimesh3D.h"

void TriMesh3D(double a, double b, int Nx, int Ny, Eigen::MatrixXd& x_nodes, Eigen::MatrixXd& y_nodes, Eigen::MatrixXd& z_nodes){
  NUM_ELEMENTS=2*Nx*Ny;
  //Number the triangles the object is made of from lowest to highest
  ELEMENTS=Eigen::MatrixXi::Zero(NUM_ELEMENTS,3);//The matrix that will contain element->Vertex relations
  for(int j=0;j<Ny;j++)
    for(int i=0;i<Nx;i++){
      int elem_offset=j*2*Nx;
      int node_offset=j*(Nx+1);
      //Lower row L
      ELEMENTS.row(i+elem_offset)<<i+node_offset,i+1+node_offset,i+Nx+1+node_offset;
      //Upper row "Inverted L"
      ELEMENTS.row(i+elem_offset+Nx)<<i+1+node_offset,i+Nx+1+node_offset,i+Nx+2+node_offset;
    }
  NUM_NODES=(Nx+1)*(Ny+1);
  //Coordinates for each node, indexated as above
  double del_x=a/(1.*Nx);
  double del_y=b/(1.*Ny);
  int counter=0;
  NODE_COORD=Eigen::MatrixXd::Zero(NUM_NODES,3);
  for(int j=0;j<Ny+1;j++)
    for(int i=0;i<Nx+1;i++){
      NODE_COORD.row(counter)<<i*del_x,j*del_y,0.0;//flat plate lying on z=0
      counter++;
    }

  //These ones go from 0 to Nx
  x_nodes.resize(Nx+1,1);
  y_nodes.resize(Ny+1,1);
  
  for(int i=0;i<Nx+1;i++) x_nodes(i,0)=(a*i)/Nx;
  for(int i=0;i<Ny+1;i++) y_nodes(i,0)=(b*i)/Ny;
  z_nodes = Eigen::MatrixXd::Zero(NUM_NODES,1);
}
